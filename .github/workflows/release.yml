name: Release Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # First job: Build shared Kotlin Multiplatform code (same as build.yml)
  shared-build:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Generate cache key
      id: cache-key
      run: |
        # Create a cache key based on shared module files and gradle files
        HASH=$(find shared shared-core -name "*.kt" -o -name "*.kts" -o -name "*.gradle*" | sort | xargs cat | sha256sum | cut -d' ' -f1)
        GRADLE_HASH=$(find . -name "gradle-wrapper.properties" -o -name "build.gradle.kts" -o -name "settings.gradle.kts" | sort | xargs cat | sha256sum | cut -d' ' -f1)
        KEY="shared-kmp-${HASH}-${GRADLE_HASH}"
        echo "key=${KEY}" >> $GITHUB_OUTPUT
        echo "Generated cache key: ${KEY}"
        
    - name: Cache Gradle and KMP shared build
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          shared/build
          shared-core/build
          build/kotlin-build-cache
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          shared-kmp-
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Shared Kotlin Multiplatform modules
      run: |
        echo "Building shared KMP modules for release..."
        ./gradlew :shared:assembleRelease :shared-core:assembleRelease --stacktrace --no-daemon --build-cache
        echo "Shared KMP release build completed"
        
    - name: Upload shared build cache
      uses: actions/upload-artifact@v4
      with:
        name: shared-build-cache-release
        path: |
          shared/build
          shared-core/build
        retention-days: 1

  # Release build job - depends on shared-build
  release:
    runs-on: ubuntu-latest
    needs: shared-build
    permissions:
      contents: write  # Required for creating releases
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Restore Gradle and KMP shared build cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          shared/build
          shared-core/build
          build/kotlin-build-cache
        key: ${{ needs.shared-build.outputs.cache-key }}
        restore-keys: |
          shared-kmp-
          ${{ runner.os }}-gradle-
          
    - name: Download shared build cache
      uses: actions/download-artifact@v4
      with:
        name: shared-build-cache-release
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Generate version info
      id: version
      run: |
        # Generate version based on date and commit
        DATE=$(date '+%Y%m%d')
        SHORT_SHA=$(git rev-parse --short HEAD)
        VERSION="v1.0.${DATE}.${SHORT_SHA}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_code=$(date '+%Y%m%d%H')" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
        
    - name: Build Release APK (using cached shared modules)
      env:
        VERSION_NAME: ${{ steps.version.outputs.version }}
        VERSION_CODE: ${{ steps.version.outputs.version_code }}
      run: |
        echo "Building release APK using cached shared modules..."
        ./gradlew :androidApp:assembleRelease --stacktrace --no-daemon --build-cache
      
    - name: Sign APK (if keystore available)
      env:
        VERSION_NAME: ${{ steps.version.outputs.version }}
      run: |
        APK_PATH="androidApp/build/outputs/apk/release/androidApp-release-unsigned.apk"
        SIGNED_APK_PATH="androidApp/build/outputs/apk/release/mountainspotter-${{ steps.version.outputs.version }}.apk"
        
        # For now, just rename the unsigned APK to include version
        # In the future, this is where signing would happen with proper keystore
        cp "$APK_PATH" "$SIGNED_APK_PATH"
        echo "APK renamed to include version: $SIGNED_APK_PATH"
        
    - name: Create Release
      uses: ncipollo/create-release@v1
      with:
        tag: ${{ steps.version.outputs.version }}
        name: Mountain Spotter ${{ steps.version.outputs.version }}
        body: |
          ## Mountain Spotter Release ${{ steps.version.outputs.version }}
          
          **What's New:**
          - Automated release from commit ${{ github.sha }}
          - Built on ${{ github.event.head_commit.timestamp }}
          
          **Download:**
          - Android APK: See attachments below
          
          **Installation:**
          - Download the APK file
          - Enable "Install from unknown sources" on your Android device
          - Install the APK file
          
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.event.head_commit.author.name }}
          **Message:** ${{ github.event.head_commit.message }}
        artifacts: "androidApp/build/outputs/apk/release/mountainspotter-${{ steps.version.outputs.version }}.apk"
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false