name: Reusable Build & Test

on:
  workflow_call:
    inputs:
      build-type:
        description: 'Build type (debug or release)'
        required: false
        default: 'debug'
        type: string
      upload-artifacts:
        description: 'Whether to upload build artifacts'
        required: false
        default: true
        type: boolean
    outputs:
      shared-cache-key:
        description: 'Cache key for shared modules'
        value: ${{ jobs.shared-build.outputs.cache-key }}

jobs:
  # First job: Build shared Kotlin Multiplatform code
  shared-build:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Generate cache key
      id: cache-key
      run: |
        # Create a cache key based on shared module files and gradle files
        HASH=$(find shared shared-core -name "*.kt" -o -name "*.kts" -o -name "*.gradle*" | sort | xargs cat | sha256sum | cut -d' ' -f1)
        GRADLE_HASH=$(find . -name "gradle-wrapper.properties" -o -name "build.gradle.kts" -o -name "settings.gradle.kts" | sort | xargs cat | sha256sum | cut -d' ' -f1)
        KEY="shared-kmp-${HASH}-${GRADLE_HASH}"
        echo "key=${KEY}" >> $GITHUB_OUTPUT
        echo "Generated cache key: ${KEY}"
        
    - name: Cache Kotlin Native dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.konan/dependencies
          ~/.konan/kotlin-native-prebuilt-linux-*
        key: ${{ runner.os }}-kotlin-native-${{ hashFiles('shared/build.gradle.kts', 'shared-core/build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-kotlin-native-
        
    - name: Cache Gradle and KMP shared build
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/kotlin-dsl
          shared/build
          shared-core/build
          build/kotlin-build-cache
          build/kotlin
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          shared-kmp-
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Shared Kotlin Multiplatform modules
      run: |
        if [ "${{ inputs.build-type }}" == "release" ]; then
          echo "Building shared KMP modules for release..."
          ./gradlew :shared:assembleRelease :shared-core:assembleRelease --stacktrace --no-daemon --build-cache
          echo "Shared KMP release build completed"
        else
          echo "Building shared KMP modules..."
          ./gradlew :shared:assemble :shared-core:assemble --stacktrace --no-daemon --build-cache
          
          # Also build iOS frameworks to cache them
          echo "Building iOS frameworks..."
          ./gradlew :shared:linkDebugFrameworkIosSimulatorArm64 :shared:linkDebugFrameworkIosArm64 :shared:linkDebugFrameworkIosX64 --stacktrace --no-daemon --build-cache
          ./gradlew :shared:linkReleaseFrameworkIosSimulatorArm64 :shared:linkReleaseFrameworkIosArm64 :shared:linkReleaseFrameworkIosX64 --stacktrace --no-daemon --build-cache
          
          # Pre-compile common KMP targets to populate caches
          echo "Pre-compiling common targets to populate caches..."
          ./gradlew :shared:compileKotlinIosSimulatorArm64 :shared-core:compileKotlinIosSimulatorArm64 --stacktrace --no-daemon --build-cache
          
          echo "Shared KMP build completed"
        fi
        
    - name: Upload shared build cache
      uses: actions/upload-artifact@v4
      with:
        name: shared-build-cache-${{ inputs.build-type }}
        path: |
          shared/build
          shared-core/build
        retention-days: 1

  # Android build job - depends on shared-build
  android-build:
    runs-on: ubuntu-latest
    needs: shared-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Restore Gradle and KMP shared build cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/kotlin-dsl
          shared/build
          shared-core/build
          build/kotlin-build-cache
          build/kotlin
        key: ${{ needs.shared-build.outputs.cache-key }}
        restore-keys: |
          shared-kmp-
          ${{ runner.os }}-gradle-
          
    - name: Download shared build cache
      uses: actions/download-artifact@v4
      with:
        name: shared-build-cache-${{ inputs.build-type }}
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Android APKs
      run: |
        if [ "${{ inputs.build-type }}" == "release" ]; then
          echo "Building Android release APK using cached shared modules..."
          ./gradlew :androidApp:assembleRelease --stacktrace --no-daemon --build-cache
        else
          echo "Building Android APKs using cached shared modules..."
          ./gradlew :androidApp:assembleDebug :androidApp:assembleRelease --stacktrace --no-daemon --build-cache
        fi
        
    - name: Upload Debug APK
      if: inputs.upload-artifacts && inputs.build-type != 'release'
      uses: actions/upload-artifact@v4
      with:
        name: mountainspotter-debug.apk
        path: androidApp/build/outputs/apk/debug/androidApp-debug.apk
        retention-days: 30
        if-no-files-found: error
        
    - name: Upload Release APK  
      if: inputs.upload-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mountainspotter-release.apk
        path: androidApp/build/outputs/apk/release/androidApp-release-unsigned.apk
        retention-days: 30
        if-no-files-found: error

  # iOS build job - depends on shared-build
  ios-build:
    runs-on: macos-latest
    needs: shared-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Kotlin Native dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.konan/dependencies
          ~/.konan/kotlin-native-prebuilt-macos-*
        key: ${{ runner.os }}-kotlin-native-${{ hashFiles('shared/build.gradle.kts', 'shared-core/build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-kotlin-native-
          
    - name: Cache Xcode DerivedData
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/Library/Caches/com.apple.dt.Xcode
        key: ${{ runner.os }}-xcode-deriveddata-${{ hashFiles('iosApp/iosApp.xcodeproj/**') }}
        restore-keys: |
          ${{ runner.os }}-xcode-deriveddata-
        
    - name: Restore Gradle and KMP shared build cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/kotlin-dsl
          shared/build
          shared-core/build
          build/kotlin-build-cache
          build/kotlin
        key: ${{ needs.shared-build.outputs.cache-key }}
        restore-keys: |
          shared-kmp-
          ${{ runner.os }}-gradle-
          
    - name: Download shared build cache
      uses: actions/download-artifact@v4
      with:
        name: shared-build-cache-${{ inputs.build-type }}
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Verify shared frameworks (using cache)
      run: |
        echo "Verifying cached iOS frameworks are available..."
        find shared/build -name "*.framework" -type d || echo "No frameworks found, will rebuild"
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Build iOS App for Simulator
      run: |
        cd iosApp
        echo "Building iOS app for simulator using cached frameworks..."
        xcodebuild -scheme iosApp -sdk iphonesimulator -configuration Debug build -project iosApp.xcodeproj
        
    - name: Build iOS App for Device (Archive)
      run: |
        cd iosApp
        echo "Creating iOS archive for device using cached frameworks..."
        xcodebuild -project iosApp.xcodeproj -scheme iosApp -configuration Release -destination 'generic/platform=iOS' -archivePath iosApp.xcarchive archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
        
    - name: Check for signing team availability
      id: check-team
      run: |
        cd iosApp
        # Check if DEVELOPMENT_TEAM is available in environment or if we have signing certificates
        if [ -n "${{ secrets.IOS_DEVELOPMENT_TEAM }}" ] || [ -n "${{ secrets.IOS_CERTIFICATE }}" ]; then
          echo "has-team=true" >> $GITHUB_OUTPUT
          echo "Development team or certificates available for signing"
        else
          echo "has-team=false" >> $GITHUB_OUTPUT
          echo "No development team or certificates available - will skip IPA export"
        fi
        
    - name: Export IPA (if team available)
      if: steps.check-team.outputs.has-team == 'true'
      run: |
        cd iosApp
        if [ -d "iosApp.xcarchive" ]; then
          echo "Archive found, attempting to export IPA..."
          xcodebuild -exportArchive -archivePath iosApp.xcarchive -exportPath . -exportOptionsPlist ExportOptions.plist
          echo "IPA export completed"
        else
          echo "ERROR: No archive found at iosApp.xcarchive"
          echo "Available files in iosApp directory:"
          ls -la
          exit 1
        fi
        
    - name: Skip IPA export (no team available)
      if: steps.check-team.outputs.has-team == 'false'
      run: |
        echo "Skipping IPA export - no development team or certificates available"
        echo "Archive was created successfully but cannot be exported without proper signing setup"
        
    - name: Upload iOS build artifacts (conditional)
      if: inputs.upload-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mountainspotter-ios-build
        path: |
          iosApp/iosApp.xcarchive
          iosApp/*.ipa
        retention-days: 30
        if-no-files-found: warn